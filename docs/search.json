[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ASAP authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/my-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ASAP-vignette","text":"ASAP R package leverages PCA NNLS (Non-Negative Least Squares) assess ancestral composition admixed individuals high accuracy reliability, approach described \"ASAP - Assessing Ancestry Principal Components\" De Gennaro & Molinaro et al, Journal, Year, doi. ASAP assigns genetic ancestry list target samples populations given list putative sources. ASAP estimations based PCA targets source groups available, along suggest use additional groups better define PC space. PC space defined, set NNLS applied PC coordinates, effectively summarizing genetic ancestry. basic usage ASAP needs: PCA matrix, dataframe N PCs list target source groups (samples)","code":""},{"path":"/articles/my-vignette.html","id":"basic-usage-example","dir":"Articles","previous_headings":"","what":"Basic usage example","title":"ASAP-vignette","text":"Right can find basic way run ASAP, want details, please keep reading. ASAP package two functions read PCA matrix, read_eigen() read_flash(). * read_eigen() read PCA created smartpca EIGENSOFT software. * read_flash() instead, read PCA created flashpca software. goal functions set PCA file looks follows: neither read_eigen() read_flash() , might want simply use read.table(), set file aforementioned look. sake example, say obtained PCA software EIGENSOFT, using smartpca. second step set 'AS_file', file list Admixed groups () Source groups (S). want use ASAP sample-wise rather group-wise, simply adjust PCA file 'POP' column identical 'IND' column, set AS_file samples list, rather group list. AS_file two-columns file population list first column, '/S' information second column. '/S' information stands Admixed () Source (S), population/group indicate whether ASAP consider Source (S) admixed target (), file looks like : read AS_file, simple read_table(file, header=T) sufficient. PCA AS_file loaded, finally ready run ASAP follows: can avoid relying AS_file wish, rather use vector target source groups directly ASAP() function, follows: Finally, want save ASAP results table-like format, can use write_ASAP(), way:","code":"$ pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ ASAP_result = ASAP(pca_input = pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ AS_file = read.table('data/Example_AS_eigen', header=TRUE) $ ASAP_result = ASAP(pca_input = pca, as_file = AS_file) $ ASAP_result = ASAP(pca_input = pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ ASAP_result <- ASAP(pca_input = pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ write_ASAP(ASAP_input = ASAP_result, output_name = 'my_dir/my_asap_results.txt')"},{"path":"/articles/my-vignette.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"ASAP-vignette","text":"function plot_asap() can help plot ASAP() results. Based preferences, can either rely basic R ggplot2 plot results. say want plot ASAP results using ggplot2: Alternatively, plot basic R, just run command without type_ggplot option, like : find barplot working directory.","code":"$ ASAP_result <- ASAP(pca_input = pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ plot_asap(ASAP_result, 'ASAP_plot', type_ggplot = 'YES') $ ASAP_result <- ASAP(pca_input = pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ plot_asap(ASAP_result, 'ASAP_plot')"},{"path":"/articles/my-vignette.html","id":"selecting-the-optimal-number-of-pcs","dir":"Articles","previous_headings":"","what":"Selecting the optimal number of PCs","title":"ASAP-vignette","text":"","code":"$ ASAP_main_result <- ASAP(pca_input = main_pca, sources = c('ESN','CEU'), admixed=c('GIH')) $ pcs_distances(pca_input, output_name, sources_file, return_plot = NULL)"},{"path":"/articles/my-vignette.html","id":"resampling","dir":"Articles","previous_headings":"","what":"Resampling","title":"ASAP-vignette","text":"produce Standard Errors (SE), can rely resampling techniques. say produce 20 PCAs estimate SE, dataset different SNPs subset: thus end 20 PCAs, slighly different values PC coordinates. function read.resampling() reads 20 PCAs perform ASAP , return list containing results resampling (20 ASAP results). Given read.resampling() read perform ASAP resampled set, function uses several arguments: path_tofiles, path directory 20 PCAs stored file_pattern, string containing name shared 20 PCAs, function use string pattern find files said string. parameter seems confusing, consider modelled function considering resampling setting one name PCAs follows: 'PCA_Resampled_1', 'PCA_Resampled_2',...,'PCA_Resampled_20'. file_patters 'PCA_Resampled_' find files 'PCA_Resampled_1' 'PCA_Resampled_20'. as_file, AS_file used ASAP(). two-columns file population list first column, '/S' information second column. '/S' information stands Admixed () Source (S), population/group indicate whether ASAP consider Source (S) admixed target (), file looks like : eigentype, optional argument, present, PCA read read_eigen() function, absent PCA loaded via read_flash(). , function can ran : ran ASAP 20 resampled PCAs, estimate SE can use se.resampling() function. , need main ASAP results, obtained ASAP() main PCA (PCA available SNPs), ASAP results obtained 20 resampled PCAs (funtion read.resampling() can see ). example , can see first loaded AS_file read.table(), ASAP main results obtained ASAP(), ASAP resampling results obtained read.resampling(). Importantly, ran se.resampling(), also need number resampled analyses ran, tutorial ran 20 PCAs, therefore parameter 'chromovec' set 20 (integer).","code":"$ AS_file = read.table('data/Example_AS_eigen', header=TRUE) $ ASAP_resampling = read.resampling(path_tofiles = 'where/I/stored/my/PCAs/', file_pattern = 'PCA_Resampled_', as_file = AS_file, eigentype) $ main_pca = read_eigen(pca_input = 'data/TOY.pca.evec') $ AS_file = read.table('data/Example_AS_eigen', header=TRUE) $ ASAP_main_result <- ASAP(pca_input = main_pca, as_file = AS_file) $ ASAP_resampling = read.resampling(path_tofiles = 'where/I/stored/my/resampled/PCAs/', file_pattern = 'PCA_Resampling_', as_file = AS_file, eigentype) $ chromovec = 20  $ ASAP_SE = se.resampling(ASAP_main_result, ASAP_resampling, chromovec)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ludovica Molinaro. Author, maintainer. Francesco Montinaro. Author. Luciana DeGennaro. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Molinaro L, Montinaro F, DeGennaro L (2024). ASAP: ASsessing Ancestry Principal component analysis. R package version 0.0.1.","code":"@Manual{,   title = {ASAP: ASsessing Ancestry through Principal component analysis},   author = {Ludovica Molinaro and Francesco Montinaro and Luciana DeGennaro},   year = {2024},   note = {R package version 0.0.1}, }"},{"path":"/reference/asap.html","id":null,"dir":"Reference","previous_headings":"","what":"asap — asap","title":"asap — asap","text":"asap function takes PCA input analyses via NNLS describe admixed individuals mixture sources groups.","code":""},{"path":"/reference/asap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"asap — asap","text":"","code":"asap(pca_input, as_file, sources = NULL, admixed = NULL)"},{"path":"/reference/asap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"asap — asap","text":"pca_input R data.frame PCA N PCs as_file R data.frame two columns: POP /S, POP column lists populations considered, /S indicatea whether population considered Admixed ('') Source ('S') sources R vector indicating groups considered Sources admixed R vector indicating groups considered Admixed","code":""},{"path":"/reference/asap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"asap — asap","text":"Returns list containing ancestries proportions per Admixed group","code":""},{"path":[]},{"path":"/reference/nnls.mat2.html","id":null,"dir":"Reference","previous_headings":"","what":"nnls.mat2 — nnls.mat2","title":"nnls.mat2 — nnls.mat2","text":"nnls.mat2 function solves nonnegative least squares problems. requires two matrices, one ('donors') refers source groups, second ('recipients') refers admixed groups","code":""},{"path":"/reference/nnls.mat2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nnls.mat2 — nnls.mat2","text":"","code":"nnls.mat2(donors, recipients)"},{"path":"/reference/nnls.mat2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nnls.mat2 — nnls.mat2","text":"donors Matrix reference groups recipients Matrix target groups","code":""},{"path":"/reference/nnls.mat2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nnls.mat2 — nnls.mat2","text":"Returns matrix describing admixed groups mixture source groups, along residuals","code":""},{"path":"/reference/nnls.mat2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nnls.mat2 — nnls.mat2","text":"","code":"nnls.mat2(donors = my_source_individuals_matrix,recipients = my_admixed_individuals_matrix) #> Error in nrow(recipients): object 'my_admixed_individuals_matrix' not found"},{"path":"/reference/pcs_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"pcs_distances — pcs_distances","title":"pcs_distances — pcs_distances","text":"pcs_distances allows estimate cumulative euclidean distances PCs Sources, plot results (return_plot = 'YES').","code":""},{"path":"/reference/pcs_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pcs_distances — pcs_distances","text":"","code":"pcs_distances(pca_input, output_name, sources_file, return_plot = NULL)"},{"path":"/reference/pcs_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pcs_distances — pcs_distances","text":"pca_input Dataframe table PCA results output_name String indicating output name sources_file Two columns table: S1 S2. Contains pairs sources compared. return_plot NULL default 'YES' plot ggplot2","code":""},{"path":"/reference/pcs_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pcs_distances — pcs_distances","text":"Returns output_name.csv file cumulative distances Returns output_name.pdf file cumulative distances","code":""},{"path":"/reference/pcs_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pcs_distances — pcs_distances","text":"","code":"sources_file = read.table('~/data/Sources_Distances', header =T) #> Warning: cannot open file '/home/ludovica/data/Sources_Distances': No such file or directory #> Error in file(file, \"rt\"): cannot open the connection pca = read_flash(pca_input = 'data/TOY_flash.pca') #> Warning: cannot open file 'data/TOY_flash.pca': No such file or directory #> Error in file(file, \"rt\"): cannot open the connection pcs_distances(pca, '~/data/output_distances', sources_file = sources_file, return_plot = 'YES') #> Error in select(pca_input, contains(\"P\")): could not find function \"select\""},{"path":"/reference/plot_asap.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_asap — plot_asap","title":"plot_asap — plot_asap","text":"plot_asap allows plot ASAP assignations barplot, using either R base (default) ggplot2 (type_ggplot = 'YES')","code":""},{"path":"/reference/plot_asap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_asap — plot_asap","text":"","code":"plot_asap(asap_result, output_name, type_ggplot = NULL)"},{"path":"/reference/plot_asap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_asap — plot_asap","text":"asap_result matrix returned asap() output_name output name asap pdf plot type_ggplot NULL default 'YES' plot ggplot2","code":""},{"path":"/reference/plot_asap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_asap — plot_asap","text":"Returns ASAP_plot.pdf file working directory","code":""},{"path":"/reference/read.resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"read.resampling — read.resampling","title":"read.resampling — read.resampling","text":"read.resampling reads resampled PCAs performs ASAP one. returns list containing ASAP results per resampling. output can used se.resampling function, estimate standard error.","code":""},{"path":"/reference/read.resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read.resampling — read.resampling","text":"","code":"read.resampling(path_tofiles, file_pattern, as_file, eigentype)"},{"path":"/reference/read.resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read.resampling — read.resampling","text":"path_tofiles string containing directory path resampling files. file_pattern string containing common pattern find PCAs obtained resampling as_file R data.frame two columns: POP /S, POP column lists populations considered, /S indicates whether population considered Admixed ('') Source ('S') eigentype present, PCA read read_eigen() function, absent PCA loaded via read_flash()","code":""},{"path":"/reference/read.resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read.resampling — read.resampling","text":"Returns table containing ASAP results per resampled set.","code":""},{"path":"/reference/read.resampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read.resampling — read.resampling","text":"","code":"example_as = read.table('data/Example_AS', header=TRUE) #> Warning: cannot open file 'data/Example_AS': No such file or directory #> Error in file(file, \"rt\"): cannot open the connection  pca_jackknife = read.resampling(path_tofiles = 'data/', file_pattern = '*_Jack*', as_file = Example_AS, eigentype) #OR #> [1] \"Now reading:\" pca_jackknife = read.resampling(path_tofiles = 'data/', file_pattern = '*_Jack*', as_file = Example_AS) #> [1] \"Now reading:\""},{"path":"/reference/read_eigen.html","id":null,"dir":"Reference","previous_headings":"","what":"read_eigen — read_eigen","title":"read_eigen — read_eigen","text":"read_eigen reads smartpca output EIGENSTRAT, first column contains Family ID, second sample ID, following PCs","code":""},{"path":"/reference/read_eigen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_eigen — read_eigen","text":"","code":"read_eigen(pca_input)"},{"path":"/reference/read_eigen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_eigen — read_eigen","text":"pca_input points directory pca.evec file","code":""},{"path":"/reference/read_eigen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_eigen — read_eigen","text":"Returns PCA matrix new header: POP ID PC1 PCN CC","code":""},{"path":"/reference/read_eigen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_eigen — read_eigen","text":"","code":"read_eigen(pca_input = 'data/TOY.pca.evec') #> Warning: cannot open file 'data/TOY.pca.evec': No such file or directory #> Error in file(con, \"r\"): cannot open the connection"},{"path":"/reference/read_flash.html","id":null,"dir":"Reference","previous_headings":"","what":"read_flash — read_flash","title":"read_flash — read_flash","text":"read_flash reads PCA output flashpca, first column contains Family ID, second sample ID, following PCs","code":""},{"path":"/reference/read_flash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_flash — read_flash","text":"","code":"read_flash(pca_input)"},{"path":"/reference/read_flash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_flash — read_flash","text":"pca_input point directory flash pca file","code":""},{"path":"/reference/read_flash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read_flash — read_flash","text":"Returns PCA matrix new header: POP ID PC1 PCN","code":""},{"path":"/reference/read_flash.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_flash — read_flash","text":"","code":"read_flash(pca_input = 'data/TOY_flash.pca') #> Warning: cannot open file 'data/TOY_flash.pca': No such file or directory #> Error in file(file, \"rt\"): cannot open the connection"},{"path":"/reference/se.resampling.html","id":null,"dir":"Reference","previous_headings":"","what":"se.resampling — se.resampling","title":"se.resampling — se.resampling","text":"se.resampling estimates Standard Error comparing main ASAP run multiple ASAP runs, example runs obtained jackknife resampling. se.resampling takes three inputs: list main ASAP result, list resampling ASAP results, numeric vector containing number SNPs per chromosome.","code":""},{"path":"/reference/se.resampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"se.resampling — se.resampling","text":"","code":"se.resampling(nnls_main, nnls_resampling, chromovec)"},{"path":"/reference/se.resampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"se.resampling — se.resampling","text":"nnls_main list obtained asap() function main set. nnls_resampling list contining multilpe asap() function results, resampled set. chromovec numeric vector containing number SNPs per chromosome (ie. chromovec = rep(1000,times = 22))","code":""},{"path":"/reference/se.resampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"se.resampling — se.resampling","text":"Returns table containing standard error per target given source group.","code":""},{"path":"/reference/se.resampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"se.resampling — se.resampling","text":"","code":"se.resampling(nnls_main = ASAP_main, nnls_resampling = ASAP_resampling, chromovec) #> Error in se.resampling(nnls_main = ASAP_main, nnls_resampling = ASAP_resampling,     chromovec): object 'ASAP_main' not found"},{"path":"/reference/write_asap.html","id":null,"dir":"Reference","previous_headings":"","what":"write_asap — write_asap","title":"write_asap — write_asap","text":"write_asap allows save ASAP results table-like format.","code":""},{"path":"/reference/write_asap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"write_asap — write_asap","text":"","code":"write_asap(asap_input, output_name)"},{"path":"/reference/write_asap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"write_asap — write_asap","text":"asap_input R list returned asap() function output_name string containing file output name","code":""},{"path":"/reference/write_asap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"write_asap — write_asap","text":"","code":"asap_results <- asap(pca_input = pca, as_file = example_as) #> Error in select(pca_input, contains(\"P\")): could not find function \"select\" write_asap(asap_input = asap_results, output_name = 'my_dir/my_asap_results.txt') #> Error in data.frame(asap_input[[1]]): object 'asap_results' not found"}]
